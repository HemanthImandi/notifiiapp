package com.notifii.notifiiapp.activities;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.widget.ListView;import com.notifii.notifiiapp.R;import com.notifii.notifiiapp.adapters.MultisiteAdapter;import com.notifii.notifiiapp.base.NTF_BaseActivity;import com.notifii.notifiiapp.helpers.SingleTon;import com.notifii.notifiiapp.mvp.models.LinkedAccount;import com.notifii.notifiiapp.mvp.models.LoginResponse;import com.notifii.notifiiapp.mvp.models.MultisiteLoginRequest;import com.notifii.notifiiapp.mvp.presenters.GlobalConstantsPresenter;import com.notifii.notifiiapp.mvp.presenters.MultisiteLoginPresenter;import com.notifii.notifiiapp.mvp.presenters.RecipientsListPresenter;import com.notifii.notifiiapp.mvp.views.GlobalConstanctsView;import com.notifii.notifiiapp.mvp.views.MultisiteLoginView;import com.notifii.notifiiapp.mvp.views.RecipientsListView;import com.notifii.notifiiapp.utils.NTF_Constants;import com.notifii.notifiiapp.utils.NTF_Utils;import org.json.JSONObject;import java.util.ArrayList;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;public class MultiSiteActivity extends NTF_BaseActivity implements MultisiteLoginView, GlobalConstanctsView, RecipientsListView {    @BindView(R.id.recycler_view)    ListView listView;    static LoginResponse lResponse;    ArrayList<LinkedAccount> accounts;    MultisiteAdapter adapter;    MultisiteLoginPresenter presenter;    String username,password;    public static final String USERNAME="username", PASSWORD = "password";    private String loginApiStatus = "";    GlobalConstantsPresenter globalConstantsPresenter;    RecipientsListPresenter recipientsListPresenter;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_multi_site);        ButterKnife.bind(this);        accounts = new ArrayList<>();        accounts.addAll(lResponse.getLinkedAccounts());        accounts.get(0).setSelected(true);        adapter = new MultisiteAdapter(accounts, this);        listView.setAdapter(adapter);        presenter = new MultisiteLoginPresenter();        presenter.attachMvpView(this);        globalConstantsPresenter = new GlobalConstantsPresenter();        globalConstantsPresenter.attachMvpView(this);        recipientsListPresenter = new RecipientsListPresenter();        recipientsListPresenter.attachMvpView(this);        username = getIntent().getStringExtra(USERNAME);        password = getIntent().getStringExtra(PASSWORD);    }    @OnClick(R.id.login_btn)    void onLoginClicked(){        try{            if (!NTF_Utils.isOnline(this)){                NTF_Utils.showNoNetworkAlert(this);                return;            }            for (LinkedAccount account : accounts){                if (account.isSelected()){                    NTF_Utils.showProgressDialog(this);                    String versionName = getPackageManager().getPackageInfo(getPackageName(), 0).versionName;                    String header = NTF_Utils.getHeader(ntf_Preferences, this);                    MultisiteLoginRequest request = new MultisiteLoginRequest();                    request.setAccountId(account.getAccountId());                    request.setSessionTimedout(lResponse.getSessionTimedout());                    request.setUserId(account.getUserId());                    request.setAppVersion(versionName);                    request.setDeviceUniqueId(NTF_Utils.getUUID(this));                    request.setPassword(password);                    request.setUsername(username);                    presenter.doMultisiteLogin(header,request);                    return;                }            }        } catch (Exception e){            e.printStackTrace();        }    }    @OnClick(R.id.backLL)    void onBackClicked(){        finish();    }    @Override    public void onMFAConfigured(LoginResponse loginResponse) {        NTF_Utils.hideProgressDialog();        Intent intent = new Intent(this,MFAActivity.class);        intent.putExtra(MFAActivity.user_id,loginResponse.getUserId());        intent.putExtra(MFAActivity.acc_id,loginResponse.getAccountId());        intent.putExtra(MFAActivity.session_timeout,loginResponse.getSessionTimedout());        intent.putExtra(MFAActivity.user_name,username);        startActivity(intent);    }    @Override    public void onMultisiteLoginSuccess(LoginResponse loginResponse) {        NTF_Utils.doSaveUserDetails(loginResponse, ntf_Preferences);        getGlobalConstancts();        loginApiStatus = loginResponse.getApiStatus();        if (loginResponse.getApiStatus().equalsIgnoreCase(ResponseKeys.SUCCESS)) {            NTF_Utils.saveLoggedUserNames(Prefs_Keys.LOGIN_API_STATUS, username.trim(), this);        }    }    private void getGlobalConstancts() {        if (NTF_Utils.isOnline(this)) {            globalConstantsPresenter.getGlobalConstancts(null, NTF_Utils.getGlobalConstantsRequestObject("login_action", ntf_Preferences));        } else {            NTF_Utils.hideProgressDialog();            NTF_Utils.showNoNetworkAlert(this);            ntf_Preferences.save(Prefs_Keys.IS_LOGGED_IN, false);        }    }    @Override    public void onSessionExpired(String message) {        NTF_Utils.hideProgressDialog();        NTF_Utils.showSessionExpireAlert(message, this, ntf_Preferences);    }    @Override    public void onServerError() {        NTF_Utils.hideProgressDialog();    }    @Override    public Context getMvpContext() {        return this;    }    @Override    public void onError(Throwable throwable) {        NTF_Utils.hideProgressDialog();        NTF_Utils.showAlert(this, "", NTF_Utils.getErrorMessage(throwable), null);    }    @Override    public void onNoInternetConnection() {        NTF_Utils.hideProgressDialog();        NTF_Utils.showNoNetworkAlert(this);    }    @Override    public void onErrorCode(String s) {        NTF_Utils.showAlert(this, ALERT_ERROR_TITLE_OOPS, s, null);        NTF_Utils.hideProgressDialog();    }    @Override    public void getGlobalConstanctsFail(String message) {        NTF_Utils.hideProgressDialog();        NTF_Utils.showAlert(this, "", message, null);    }    @Override    public void getGlobalConstanctsSuccess(JSONObject response) {        getRecipientsList();        NTF_Utils.saveGlobalConstants(this, response, ntf_Preferences);    }    @Override    public void onRecipientsListSuccess(JSONObject jsonObject) {        NTF_Utils.hideProgressDialog();        if (jsonObject != null) {            NTF_Utils.saveRecipientsData(this, jsonObject);        }        SingleTon.getInstance().setPendingPackagesAPIMode("login_action");        Intent intent = new Intent(this, MainActivity.class);        if (loginApiStatus.equalsIgnoreCase(ResponseKeys.RESET_PASSWORD) || loginApiStatus.equalsIgnoreCase(ResponseKeys.RESET_USERNAME_PASSWORD)) {            intent.putExtra(NTF_Constants.Extras_Keys.LOGIN_API_STATUS, loginApiStatus);        }        ntf_Preferences.save(Prefs_Keys.IS_LOGGED_IN, true);        NTF_Utils.startAlarmIfRequired(this);        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);        ntf_Preferences.save(Prefs_Keys.SESSION_TIMEOUT,lResponse.getSessionTimedout());        startActivity(intent);        finish();    }    @Override    public void onRecipientListError(String message) {        NTF_Utils.hideProgressDialog();        NTF_Utils.showAlert(this, "", message, null);    }    private void getRecipientsList() {        if (NTF_Utils.isOnline(this)) {            recipientsListPresenter.getRecipientList(null, NTF_Utils.getRecipientListRequestObject("login_action", ntf_Preferences));        } else {            ntf_Preferences.save(Prefs_Keys.IS_LOGGED_IN, false);            NTF_Utils.hideProgressDialog();            NTF_Utils.showNoNetworkAlert(this);        }    }}